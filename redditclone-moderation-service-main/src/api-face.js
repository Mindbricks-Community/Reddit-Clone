const { inject } = require("mindbricks-api-face");

module.exports = (app) => {
  const authUrl = (process.env.SERVICE_URL ?? "mindbricks.com").replace(
    process.env.SERVICE_SHORT_NAME,
    "auth",
  );

  const config = {
    name: "redditclone - moderation",
    brand: {
      name: "redditclone",
      image: "https://mindbricks.com/favicon.ico",
      moduleName: "moderation",
      version: process.env.SERVICE_VERSION || "1.0.0",
    },
    auth: {
      url: authUrl,
      loginPath: "/login",
      logoutPath: "/logout",
      currentUserPath: "/currentuser",
      authStrategy: "external",
      initialAuth: true,
    },
    dataObjects: [
      {
        name: "ModerationAction",
        description:
          "Records each manual moderation action (approve, remove, lock, warn, temp-ban, etc.) performed on a post, comment, or user within a community for audit and workflow.",
        reference: {
          tableName: "moderationAction",
          properties: [
            {
              name: "communityId",
              type: "ID",
            },

            {
              name: "targetType",
              type: "Enum",
            },

            {
              name: "targetId",
              type: "ID",
            },

            {
              name: "actionType",
              type: "Enum",
            },

            {
              name: "performedByUserId",
              type: "ID",
            },

            {
              name: "performedByRole",
              type: "Enum",
            },

            {
              name: "reason",
              type: "String",
            },

            {
              name: "notes",
              type: "Text",
            },
          ],
        },
        endpoints: [
          {
            isAuth: true,
            method: "GET",
            url: "/moderationactions/{moderationActionId}",
            title: "getModerationAction",
            query: [],

            parameters: [
              {
                key: "moderationActionId",
                value: "",
                description: "",
              },
            ],
            headers: [],
          },

          {
            isAuth: true,
            method: "POST",
            url: "/moderationactions",
            title: "createModerationAction",
            query: [],

            body: {
              type: "json",
              content: {
                communityId: "ID",
                targetType: "Enum",
                targetId: "ID",
                actionType: "Enum",
                performedByRole: "Enum",
                reason: "String",
                notes: "Text",
              },
            },

            parameters: [],
            headers: [],
          },

          {
            isAuth: true,
            method: "PATCH",
            url: "/moderationactions/{moderationActionId}",
            title: "updateModerationAction",
            query: [],

            body: {
              type: "json",
              content: {
                reason: "String",
                notes: "Text",
              },
            },

            parameters: [
              {
                key: "moderationActionId",
                value: "",
                description: "",
              },
            ],
            headers: [],
          },

          {
            isAuth: true,
            method: "DELETE",
            url: "/moderationactions/{moderationActionId}",
            title: "deleteModerationAction",
            query: [],

            body: {
              type: "json",
              content: {},
            },

            parameters: [
              {
                key: "moderationActionId",
                value: "",
                description: "",
              },
            ],
            headers: [],
          },

          {
            isAuth: true,
            method: "GET",
            url: "/moderationactions",
            title: "listModerationActions",
            query: [],

            parameters: [],
            headers: [],
          },
        ],
      },

      {
        name: "AutomodEvent",
        description:
          "Records each event generated by the community-level automoderator logic (trigger, removal, lock, filter, etc). Links to content, rule, and context.",
        reference: {
          tableName: "automodEvent",
          properties: [
            {
              name: "communityId",
              type: "ID",
            },

            {
              name: "targetType",
              type: "Enum",
            },

            {
              name: "targetId",
              type: "ID",
            },

            {
              name: "automodType",
              type: "Enum",
            },

            {
              name: "ruleId",
              type: "ID",
            },

            {
              name: "performedByAutomod",
              type: "Boolean",
            },

            {
              name: "triggerDetails",
              type: "Object",
            },
          ],
        },
        endpoints: [
          {
            isAuth: true,
            method: "GET",
            url: "/automodevents/{automodEventId}",
            title: "getAutomodEvent",
            query: [],

            parameters: [
              {
                key: "automodEventId",
                value: "",
                description: "",
              },
            ],
            headers: [],
          },

          {
            isAuth: true,
            method: "POST",
            url: "/automodevents",
            title: "createAutomodEvent",
            query: [],

            body: {
              type: "json",
              content: {
                communityId: "ID",
                targetType: "Enum",
                targetId: "ID",
                automodType: "Enum",
                ruleId: "ID",
                performedByAutomod: "Boolean",
                triggerDetails: "Object",
              },
            },

            parameters: [],
            headers: [],
          },

          {
            isAuth: true,
            method: "PATCH",
            url: "/automodevents/{automodEventId}",
            title: "updateAutomodEvent",
            query: [],

            body: {
              type: "json",
              content: {
                triggerDetails: "Object",
              },
            },

            parameters: [
              {
                key: "automodEventId",
                value: "",
                description: "",
              },
            ],
            headers: [],
          },

          {
            isAuth: true,
            method: "DELETE",
            url: "/automodevents/{automodEventId}",
            title: "deleteAutomodEvent",
            query: [],

            body: {
              type: "json",
              content: {},
            },

            parameters: [
              {
                key: "automodEventId",
                value: "",
                description: "",
              },
            ],
            headers: [],
          },

          {
            isAuth: true,
            method: "GET",
            url: "/automodevents",
            title: "listAutomodEvents",
            query: [],

            parameters: [],
            headers: [],
          },
        ],
      },

      {
        name: "ModerationAuditLog",
        description:
          "Complete audit log of all moderation and automod events, including manual actions, automated actions, and source context.",
        reference: {
          tableName: "moderationAuditLog",
          properties: [
            {
              name: "logEntryType",
              type: "Enum",
            },

            {
              name: "communityId",
              type: "ID",
            },

            {
              name: "entityType",
              type: "Enum",
            },

            {
              name: "entityId",
              type: "ID",
            },

            {
              name: "actionUserId",
              type: "ID",
            },

            {
              name: "linkedModerationActionId",
              type: "ID",
            },
          ],
        },
        endpoints: [
          {
            isAuth: true,
            method: "GET",
            url: "/moderationauditlogs/{moderationAuditLogId}",
            title: "getModerationAuditLog",
            query: [],

            parameters: [
              {
                key: "moderationAuditLogId",
                value: "",
                description: "",
              },
            ],
            headers: [],
          },

          {
            isAuth: true,
            method: "POST",
            url: "/moderationauditlogs",
            title: "createModerationAuditLog",
            query: [],

            body: {
              type: "json",
              content: {
                logEntryType: "Enum",
                communityId: "ID",
                entityType: "Enum",
                entityId: "ID",
                actionUserId: "ID",
                linkedModerationActionId: "ID",
              },
            },

            parameters: [],
            headers: [],
          },

          {
            isAuth: true,
            method: "PATCH",
            url: "/moderationauditlogs/{moderationAuditLogId}",
            title: "updateModerationAuditLog",
            query: [],

            body: {
              type: "json",
              content: {},
            },

            parameters: [
              {
                key: "moderationAuditLogId",
                value: "",
                description: "",
              },
            ],
            headers: [],
          },

          {
            isAuth: true,
            method: "DELETE",
            url: "/moderationauditlogs/{moderationAuditLogId}",
            title: "deleteModerationAuditLog",
            query: [],

            body: {
              type: "json",
              content: {},
            },

            parameters: [
              {
                key: "moderationAuditLogId",
                value: "",
                description: "",
              },
            ],
            headers: [],
          },

          {
            isAuth: true,
            method: "GET",
            url: "/moderationauditlogs",
            title: "listModerationAuditLogs",
            query: [],

            parameters: [],
            headers: [],
          },
        ],
      },

      {
        name: "ModmailThread",
        description:
          "Represents a modmail conversation thread between moderators and a user (or group, if extended). Thread is logical envelope for messages.",
        reference: {
          tableName: "modmailThread",
          properties: [
            {
              name: "communityId",
              type: "ID",
            },

            {
              name: "subject",
              type: "String",
            },

            {
              name: "createdByUserId",
              type: "ID",
            },

            {
              name: "status",
              type: "Enum",
            },
          ],
        },
        endpoints: [
          {
            isAuth: true,
            method: "GET",
            url: "/modmailthreads/{modmailThreadId}",
            title: "getModmailThread",
            query: [],

            parameters: [
              {
                key: "modmailThreadId",
                value: "",
                description: "",
              },
            ],
            headers: [],
          },

          {
            isAuth: true,
            method: "POST",
            url: "/modmailthreads",
            title: "createModmailThread",
            query: [],

            body: {
              type: "json",
              content: {
                communityId: "ID",
                subject: "String",
                status: "Enum",
              },
            },

            parameters: [],
            headers: [],
          },

          {
            isAuth: true,
            method: "PATCH",
            url: "/modmailthreads/{modmailThreadId}",
            title: "updateModmailThread",
            query: [],

            body: {
              type: "json",
              content: {
                subject: "String",
                status: "Enum",
              },
            },

            parameters: [
              {
                key: "modmailThreadId",
                value: "",
                description: "",
              },
            ],
            headers: [],
          },

          {
            isAuth: true,
            method: "DELETE",
            url: "/modmailthreads/{modmailThreadId}",
            title: "deleteModmailThread",
            query: [],

            body: {
              type: "json",
              content: {},
            },

            parameters: [
              {
                key: "modmailThreadId",
                value: "",
                description: "",
              },
            ],
            headers: [],
          },

          {
            isAuth: true,
            method: "GET",
            url: "/modmailthreads",
            title: "listModmailThreads",
            query: [],

            parameters: [],
            headers: [],
          },
        ],
      },

      {
        name: "ModmailMessage",
        description:
          "A message sent as part of a modmail thread; can be by a moderator or a user.",
        reference: {
          tableName: "modmailMessage",
          properties: [
            {
              name: "threadId",
              type: "ID",
            },

            {
              name: "senderUserId",
              type: "ID",
            },

            {
              name: "messageBody",
              type: "Text",
            },

            {
              name: "messageType",
              type: "Enum",
            },
          ],
        },
        endpoints: [
          {
            isAuth: true,
            method: "GET",
            url: "/modmailmessages/{modmailMessageId}",
            title: "getModmailMessage",
            query: [],

            parameters: [
              {
                key: "modmailMessageId",
                value: "",
                description: "",
              },
            ],
            headers: [],
          },

          {
            isAuth: true,
            method: "POST",
            url: "/modmailmessages",
            title: "createModmailMessage",
            query: [],

            body: {
              type: "json",
              content: {
                threadId: "ID",
                messageBody: "Text",
                messageType: "Enum",
              },
            },

            parameters: [],
            headers: [],
          },

          {
            isAuth: true,
            method: "PATCH",
            url: "/modmailmessages/{modmailMessageId}",
            title: "updateModmailMessage",
            query: [],

            body: {
              type: "json",
              content: {},
            },

            parameters: [
              {
                key: "modmailMessageId",
                value: "",
                description: "",
              },
            ],
            headers: [],
          },

          {
            isAuth: true,
            method: "DELETE",
            url: "/modmailmessages/{modmailMessageId}",
            title: "deleteModmailMessage",
            query: [],

            body: {
              type: "json",
              content: {},
            },

            parameters: [
              {
                key: "modmailMessageId",
                value: "",
                description: "",
              },
            ],
            headers: [],
          },

          {
            isAuth: true,
            method: "GET",
            url: "/modmailmessages",
            title: "listModmailMessages",
            query: [],

            parameters: [],
            headers: [],
          },
        ],
      },
    ],
  };

  inject(app, config);
};
