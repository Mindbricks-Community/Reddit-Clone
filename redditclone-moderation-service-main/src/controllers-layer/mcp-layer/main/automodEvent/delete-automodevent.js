const { DeleteAutomodEventManager } = require("managers");
const { z } = require("zod");

const ModerationMcpController = require("../../ModerationServiceMcpController");

class DeleteAutomodEventMcpController extends ModerationMcpController {
  constructor(params) {
    super("deleteAutomodEvent", "deleteautomodevent", params);
    this.dataName = "automodEvent";
    this.crudType = "delete";
  }

  createApiManager() {
    return new DeleteAutomodEventManager(this.request, "mcp");
  }

  static getOutputSchema() {
    return z
      .object({
        status: z.string(),
        automodEvent: z
          .object({
            id: z
              .string()
              .uuid()
              .describe("The unique primary key of the data object as UUID"),
            communityId: z
              .string()
              .uuid()
              .describe("Community where this automod event took place."),
            targetType: z
              .enum(["post", "comment"])
              .describe("Target type: 0=post, 1=comment."),
            targetId: z
              .string()
              .uuid()
              .describe(
                "ID of the post or comment affected by the automod event.",
              ),
            automodType: z
              .enum([
                "trigger",
                "autoRemove",
                "autoLock",
                "flagNsfw",
                "filter",
                "rateLimit",
                "spamDetect",
                "mediaFlag",
                "custom",
              ])
              .describe(
                "Type of automod event: 0=trigger, 1=auto-remove, 2=auto-lock, 3=flag-nsfw, 4=filter, 5=rate-limit, 6=spam-detect, 7=media-flag, 8=custom.",
              ),
            ruleId: z
              .string()
              .uuid()
              .optional()
              .nullable()
              .describe(
                "ID of the automod or community rule (if any) that triggered the event.",
              ),
            performedByAutomod: z
              .boolean()
              .describe("True if the action/event was performed by automod."),
            triggerDetails: z
              .object()
              .optional()
              .nullable()
              .describe(
                "JSON blob: detailed trigger context: keywords, patterns, match values.",
              ),
            isActive: z
              .boolean()
              .describe(
                "The active status of the data object to manage soft delete. False when deleted.",
              ),
          })
          .describe(
            "Records each event generated by the community-level automoderator logic (trigger, removal, lock, filter, etc). Links to content, rule, and context.",
          ),
      })
      .describe("The response object of the crud route");
  }

  static getInputScheme() {
    return {
      accessToken: z
        .string()
        .optional()
        .describe(
          "The access token which is returned from a login request or given by user. This access token will override if there is any bearer or OAuth token in the mcp client. If not given the request will be made with the system (bearer or OAuth) token. For public routes you dont need to deifne any access token.",
        ),
      automodEventId: z
        .string()
        .uuid()
        .describe(
          "This id paremeter is used to select the required data object that will be deleted",
        ),
    };
  }
}

module.exports = (headers) => {
  return {
    name: "deleteAutomodEvent",
    description: "Soft-delete an automod event.",
    parameters: DeleteAutomodEventMcpController.getInputScheme(),
    controller: async (mcpParams) => {
      mcpParams.headers = headers;
      const deleteAutomodEventMcpController =
        new DeleteAutomodEventMcpController(mcpParams);
      try {
        const result = await deleteAutomodEventMcpController.processRequest();
        //return DeleteAutomodEventMcpController.getOutputSchema().parse(result);
        return {
          content: [
            {
              type: "text",
              text: JSON.stringify(result),
            },
          ],
        };
      } catch (err) {
        return {
          isError: true,
          content: [
            {
              type: "text",
              text: `Error: ${err.message}`,
            },
          ],
        };
      }
    },
  };
};
